#!/bin/sh
#
### BEGIN INIT INFO
# Provides: cuttlefish-common
# Required-Start: $network $remote_fs
# Required-Stop: $network $remote_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Set up initial cuttlefish environment
# Description: This script sets up the initial cuttlefist environment,
#              optionally booting a default cuttlefish release.
### END INIT INFO
#
# Copyright (C) 2017 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Make sure calls to this script get redirected to systemctl when
# using systemd

. /lib/lsb/init-functions

if [ -f /etc/default/cuttlefish-common ]; then
    . /etc/default/cuttlefish-common
fi

if [ -z "${num_cvd_accounts}" ]; then
    num_cvd_accounts=10
fi
if [ -z "${dns_servers}" ]; then
    dns_servers="8.8.8.8,8.8.4.4"
fi
if [ -z "${dns6_servers}" ]; then
    dns6_servers="2001:4860:4860::8888,2001:4860:4860::8844"
fi

# Creates a pair of bridge and tap interfaces
create_interface() {
    bridge="$(printf cvd-${1}br-%02d $2)"
    tap="$(printf cvd-${1}tap-%02d $2)"
    gateway="${3}.$((4*$2 - 3))"
    network="${3}.$((4*$2 - 4))/30"
    netmask="255.255.255.252"
    dhcp_range="${3}.$((4*$2 - 2)),${3}.$((4*$2 - 2))"

    brctl addbr "${bridge}"
    brctl stp "${bridge}" off
    brctl setfd "${bridge}" 0
    ifconfig "${bridge}" "${gateway}" netmask "${netmask}" up

    iptables -t nat -A POSTROUTING -s "${network}" -j MASQUERADE

    dnsmasq \
      --port=0 \
      --strict-order \
      --except-interface=lo \
      --interface="${bridge}" \
      --listen-address="${gateway}" \
      --bind-interfaces \
      --dhcp-range="${dhcp_range}" \
      --dhcp-option="option:dns-server,${dns_servers}" \
      --dhcp-option="option6:dns-server,${dns6_servers}" \
      --conf-file="" \
      --pid-file=/var/run/cuttlefish-dnsmasq-"${bridge}".pid \
      --dhcp-leasefile=/var/run/cuttlefish-dnsmasq-"${bridge}".leases \
      --dhcp-no-override

    ip tuntap add dev "${tap}" mode tap group cvdnetwork
    ifconfig "${tap}" 0.0.0.0 up
    brctl addif "${bridge}" "${tap}"
}

create_interfaces() {
    create_interface w $1 192.168.96
    create_interface m $1 192.168.97
}

destroy_interface() {
    bridge="$(printf cvd-${1}br-%02d $2)"
    tap="$(printf cvd-${1}tap-%02d $2)"
    network="${3}.$((4*$2 - 4))/30"

    ifconfig "${tap}" down
    ip link delete "${tap}"

    if [ -f /var/run/cuttlefish-dnsmasq-"${bridge}".pid ]; then
        kill $(cat /var/run/cuttlefish-dnsmasq-"${bridge}".pid)
    fi

    iptables -t nat -D POSTROUTING -s "${network}" -j MASQUERADE

    ifconfig "${bridge}" down
    brctl delbr "${bridge}"
}

destroy_interfaces() {
    # Use wtap/wbr and mtap/mbr for wifi and mobile network respectively to
    # avoid going over the interface name size limit
    destroy_interface w $1 192.168.96
    destroy_interface m $1 192.168.97
}


start() {
    # Enable ip forwarding
    echo 1 >/proc/sys/net/ipv4/ip_forward

    for i in $(seq ${num_cvd_accounts}); do
        create_interfaces $i
    done

    # When running inside a privileged container, set the ownership and access
    # of these device nodes.
    if test -f /.dockerenv; then
        chown root.kvm /dev/kvm
        chown root.cvdnetwork /dev/vhost-vsock
        chmod ug+rw /dev/kvm
        chmod ug+rw /dev/vhost-vsock
    fi

    # Try to preload the Nvidia modeset kernel module.
    /usr/bin/nvidia-modprobe --modeset || /bin/true
}

stop() {
    for i in $(seq ${num_cvd_accounts}); do
        destroy_interfaces $i
    done
}

usage() {
    echo $0: start\|stop
}

if test $# != 1; then
    usage
fi
case "$1" in
    --help)
        usage 0
        ;;
    start|stop)
        "$1"
        ;;
    restart)
        stop && start
        ;;
    condrestart|try-restart)
        stop && start
        ;;
    reload|force-reload)
        # Nothing to do; we reread configuration on each invocation
        ;;
    status)
        rh_status
        ;;
    shutdown)
        stop
        ;;
    *)
        usage
        ;;
esac
exit $RETVAL
